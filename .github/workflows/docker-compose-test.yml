name: Docker Compose Test

on:
  push:
    branches:
      - main
    paths:
      - "docker/**"
      - ".github/workflows/docker-compose-test.yml"
      - "test-ingestion-*.py"
      - "test-ingestion-*.js"
      - "run-ingestion-test.sh"
      - "requirements-test.txt"
      - "package.json"
  pull_request:
    branches:
      - main
    paths:
      - "docker/**"
      - ".github/workflows/docker-compose-test.yml"
      - "test-ingestion-*.py"
      - "test-ingestion-*.js"
      - "run-ingestion-test.sh"
      - "requirements-test.txt"
      - "package.json"
  workflow_dispatch:
  # Run daily at midnight UTC
  schedule:
    - cron: '0 0 * * *'

jobs:
  test:
    name: Test Docker Compose Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate .env file with all required variables
        run: |
          cd docker
          cat > .env << EOF
          # Security
          JWT_SECRET=$(openssl rand -hex 32)
          PRISMA_FIELD_ENCRYPTION_KEY=k1.aesgcm256.7UUD7t-nSozdo2GUD4-MIgqpUMql4s0nlbnswjvQ9Ik=

          # Common Settings
          NODE_ENV=production
          ENVIRONMENT=production
          NEXT_PUBLIC_SELF_HOSTED=true
          NEXT_PUBLIC_SELF_HOSTED_TLS=false
          PORT=3000
          PUBLIC_HOSTNAME=localhost
          WEBSOCKET_URL=ws://localhost:3001

          # Admin Configuration
          ADMIN_EMAIL=admin@gentrace.ai
          ADMIN_NAME=Admin User
          ADMIN_PASSWORD=TestPassword123

          # PostgreSQL Configuration
          POSTGRES_USER=gentrace
          POSTGRES_PASSWORD=gentrace123
          POSTGRES_DB=gentrace
          DATABASE_URL=postgresql://gentrace:gentrace123@postgres:5432/gentrace

          # ClickHouse Configuration
          CLICKHOUSE_DATABASE=gentrace
          CLICKHOUSE_HOST=clickhouse
          CLICKHOUSE_PORT=8123
          CLICKHOUSE_PROTOCOL=http
          CLICKHOUSE_USER=default
          CLICKHOUSE_PASSWORD=gentrace123

          # Kafka Configuration
          CONNECT_BOOTSTRAP_SERVERS=kafka:9092
          CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
          CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter

          # Object Storage Configuration (MinIO for local testing)
          STORAGE_ACCESS_KEY_ID=minioadmin
          STORAGE_SECRET_ACCESS_KEY=minioadmin
          STORAGE_ENDPOINT=http://minio:9000
          STORAGE_BUCKET=gentrace-public
          STORAGE_REGION=us-east-1
          STORAGE_FORCE_PATH_STYLE=true

          # MinIO Configuration
          MINIO_ROOT_USER=minioadmin
          MINIO_ROOT_PASSWORD=minioadmin

          # Docker Registry (empty for Docker Hub)
          DOCKER_REGISTRY_URL_PREFIX=
          EOF

      - name: Create MinIO bucket
        run: |
          cd docker
          docker compose up -d minio
          sleep 10
          docker compose exec -T minio mc alias set myminio http://localhost:9000 minioadmin minioadmin
          docker compose exec -T minio mc mb myminio/gentrace-public || true

      - name: Start services with Docker Compose
        run: |
          cd docker
          docker compose up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          cd docker
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            if docker compose exec -T postgres pg_isready -U gentrace; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL not ready, retrying..."
            sleep 2
          done

      - name: Wait for ClickHouse to be ready
        run: |
          cd docker
          echo "Waiting for ClickHouse..."
          for i in {1..30}; do
            if curl -s http://localhost:8123/ping; then
              echo "ClickHouse is ready!"
              break
            fi
            echo "ClickHouse not ready, retrying..."
            sleep 2
          done

      - name: Wait for Kafka to be ready
        run: |
          cd docker
          echo "Waiting for Kafka..."
          for i in {1..30}; do
            if docker compose exec -T kafka kafka-topics --bootstrap-server localhost:9092 --list 2>/dev/null; then
              echo "Kafka is ready!"
              break
            fi
            echo "Kafka not ready, retrying..."
            sleep 2
          done

      - name: Check service status
        run: |
          cd docker
          docker compose ps
          echo "Checking app logs..."
          docker compose logs app --tail=50

      - name: Test app homepage
        run: |
          cd docker
          echo "Testing app homepage..."

          # Wait a bit for the app to fully initialize after Next.js says it's ready
          sleep 10

          for i in {1..60}; do
            # Check if container is running first
            if ! docker compose ps app | grep -q "Up"; then
              echo "App container is not running!"
              docker compose ps app
              docker compose logs app --tail=20
              sleep 5
              continue
            fi
            
            # Try to connect with curl
            echo "Attempt $i - Testing http://localhost:3000..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 2>/dev/null || echo "000")
            CURL_EXIT=$?
            
            echo "HTTP Code: $HTTP_CODE"
            
            # Accept any 2xx or 3xx response as success
            if [[ "$HTTP_CODE" =~ ^[23][0-9][0-9]$ ]]; then
              echo "App is responding with HTTP $HTTP_CODE - Success!"
              exit 0
            fi
            
            # If we're getting a 4xx or 5xx, that's still a response
            if [[ "$HTTP_CODE" =~ ^[45][0-9][0-9]$ ]]; then
              echo "App is responding but with error code $HTTP_CODE"
              echo "Fetching full response:"
              curl -s http://localhost:3000 || true
            fi
            
            echo "App not ready, retrying in 5 seconds..."
            sleep 5
          done

          echo "App failed to become ready after all retries"
          docker compose logs app --tail=50
          exit 1

      - name: Test websocket server homepage
        run: |
          cd docker
          echo "Testing websocket server homepage..."

          for i in {1..60}; do
            # Check if container is running first
            if ! docker compose ps websocket-server | grep -q "Up"; then
              echo "WebSocket server container is not running!"
              docker compose ps websocket-server
              docker compose logs websocket-server --tail=20
              sleep 5
              continue
            fi
            
            # Try to connect with curl
            echo "Attempt $i - Testing http://localhost:3001..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001 2>/dev/null || echo "000")
            CURL_EXIT=$?
            
            echo "WebSocket server HTTP Code: $HTTP_CODE"
            
            # Accept any 2xx or 3xx response as success
            if [[ "$HTTP_CODE" =~ ^[23][0-9][0-9]$ ]]; then
              echo "WebSocket server is responding with HTTP $HTTP_CODE - Success!"
              exit 0
            fi
            
            # If we're getting a 4xx or 5xx, that's still a response
            if [[ "$HTTP_CODE" =~ ^[45][0-9][0-9]$ ]]; then
              echo "WebSocket server is responding but with error code $HTTP_CODE"
              echo "Fetching full response:"
              curl -s http://localhost:3001 || true
            fi
            
            echo "WebSocket server not ready, retrying in 5 seconds..."
            sleep 5
          done

          echo "WebSocket server failed to become ready after all retries"
          docker compose logs websocket-server --tail=50
          exit 1

      - name: Set up Python for ingestion tests
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js for ingestion tests
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install ingestion test dependencies
        run: |
          # Install Python dependencies
          pip install -r requirements-test.txt
          
          # Install Node.js dependencies
          npm install

      - name: Run OTEL ingestion pipeline tests
        run: |
          echo "Running comprehensive OTEL ingestion pipeline tests..."
          
          # Set environment variables for the test
          export GENTRACE_BASE_URL="http://localhost:3000"
          export POSTGRES_HOST="localhost"
          export POSTGRES_PORT="5432"
          export POSTGRES_DB="gentrace"
          export POSTGRES_USER="gentrace"
          export POSTGRES_PASSWORD="gentrace123"
          export CLICKHOUSE_HOST="localhost"
          export CLICKHOUSE_PORT="8123"
          export CLICKHOUSE_DB="gentrace"
          export CLICKHOUSE_USER="default"
          export CLICKHOUSE_PASSWORD="gentrace123"
          export GENTRACE_API_KEY="gt-test-$(date +%s)"
          export ORGANIZATION_ID="test-org-$(date +%s)"
          export PIPELINE_ID="test-pipeline-$(date +%s)"
          
          # Wait a bit more for all services to be fully ready
          echo "Waiting for services to stabilize..."
          sleep 15
          
          # Additional wait for ClickHouse replication setup (eventual consistency)
          echo "Allowing extra time for ClickHouse replication setup..."
          sleep 10
          
          # Run both Python and Node.js ingestion tests
          echo "Running Python ingestion test..."
          python3 test-ingestion-pipeline.py
          
          echo "Running Node.js ingestion test..."
          node test-ingestion-node.js
          
          echo "All ingestion tests passed successfully!"

      - name: Cleanup on failure
        if: failure()
        run: |
          cd docker
          echo "=== App logs ==="
          docker compose logs app --tail=100
          echo "=== WebSocket server logs ==="
          docker compose logs websocket-server --tail=50
          echo "=== PostgreSQL logs ==="
          docker compose logs postgres --tail=50
          echo "=== Kafka logs ==="
          docker compose logs kafka --tail=50
          echo "=== ClickHouse logs ==="
          docker compose logs clickhouse --tail=50
          echo "=== All container status ==="
          docker compose ps
          
          # Also check if ingestion test files exist and show their status
          cd ..
          echo "=== Ingestion test files status ==="
          ls -la test-ingestion-* requirements-test.txt package.json 2>/dev/null || echo "Ingestion test files not found"
          
          # Show recent database content for debugging
          echo "=== Recent GTSpan records (if any) ==="
          docker compose exec -T postgres psql -U gentrace -d gentrace -c "SELECT id, name, type, \"createdAt\" FROM \"GTSpan\" ORDER BY \"createdAt\" DESC LIMIT 5;" 2>/dev/null || echo "Could not query GTSpan table"
          
          echo "=== Recent ClickHouse span records (if any) ==="
          curl -s "http://localhost:8123/?query=SELECT id, name, createdAt FROM span ORDER BY createdAt DESC LIMIT 5 FORMAT JSON" 2>/dev/null || echo "Could not query ClickHouse span table"

  notify-slack:
    needs: [test]
    if: always() && failure()
    name: Notify Docker Compose test failed to Slack
    runs-on: ubuntu-latest
    steps:
      - name: Map GitHub handle to Slack handle
        id: map-handle
        run: |
          # Define a mapping from GitHub handle to your registered Slack email
          declare -A handle_map=(
            ["joshlebed"]="josh@gentrace.ai"
            ["steventsao"]="steven@gentrace.ai"
            ["viveknair"]="vivek@gentrace.ai"
            ["dougsafreno"]="doug@gentrace.ai"
          )
          # Default to the GitHub handle if not found in the map
          SLACK_HANDLE="${handle_map[${{ github.actor }}]:-${{ github.actor }}}"
          echo "SLACK_HANDLE=$SLACK_HANDLE" >> $GITHUB_ENV

      - name: Post Docker Compose test failed to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "channel": "github-builds",
              "user": "${{ env.SLACK_HANDLE }}",
              "message": "Docker Compose test failed in self-hosted repo: https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WORKFLOW_STAGING_BUILD_FAILED }}
