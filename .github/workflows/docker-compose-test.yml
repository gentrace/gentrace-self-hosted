name: Docker Compose Test

on:
  push:
    branches:
      - main
    paths:
      - "docker/**"
      - ".github/workflows/docker-compose-test.yml"
  pull_request:
    branches:
      - main
    paths:
      - "docker/**"
      - ".github/workflows/docker-compose-test.yml"
  workflow_dispatch:

jobs:
  test:
    name: Test Docker Compose Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate .env file with all required variables
        run: |
          cd docker
          cat > .env << EOF
          # Security
          JWT_SECRET=$(openssl rand -hex 32)
          PRISMA_FIELD_ENCRYPTION_KEY=$(openssl rand -hex 32)

          # Common Settings
          NODE_ENV=production
          ENVIRONMENT=production
          NEXT_PUBLIC_SELF_HOSTED=true
          NEXT_PUBLIC_SELF_HOSTED_TLS=false
          PORT=3000
          PUBLIC_HOSTNAME=localhost
          WEBSOCKET_URL=ws://localhost:3001

          # Admin Configuration
          ADMIN_EMAIL=admin@gentrace.ai
          ADMIN_NAME=Admin User
          ADMIN_PASSWORD=TestPassword123

          # PostgreSQL Configuration
          POSTGRES_USER=gentrace
          POSTGRES_PASSWORD=gentrace123
          POSTGRES_DB=gentrace
          DATABASE_URL=postgresql://gentrace:gentrace123@postgres:5432/gentrace

          # ClickHouse Configuration
          CLICKHOUSE_DATABASE=gentrace
          CLICKHOUSE_HOST=clickhouse
          CLICKHOUSE_PORT=8123
          CLICKHOUSE_PROTOCOL=http
          CLICKHOUSE_USER=default
          CLICKHOUSE_PASSWORD=gentrace123

          # Kafka Configuration
          CONNECT_BOOTSTRAP_SERVERS=kafka:9092
          CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
          CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter

          # Object Storage Configuration (MinIO for local testing)
          STORAGE_ACCESS_KEY_ID=minioadmin
          STORAGE_SECRET_ACCESS_KEY=minioadmin
          STORAGE_ENDPOINT=http://minio:9000
          STORAGE_BUCKET=gentrace-public
          STORAGE_REGION=us-east-1
          STORAGE_FORCE_PATH_STYLE=true

          # MinIO Configuration
          MINIO_ROOT_USER=minioadmin
          MINIO_ROOT_PASSWORD=minioadmin
          EOF

      - name: Create MinIO bucket
        run: |
          cd docker
          docker compose up -d minio
          sleep 10
          docker compose exec -T minio mc alias set myminio http://localhost:9000 minioadmin minioadmin
          docker compose exec -T minio mc mb myminio/gentrace-public || true

      - name: Start services with Docker Compose
        run: |
          cd docker
          docker compose up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          cd docker
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            if docker compose exec -T postgres pg_isready -U gentrace; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL not ready, retrying..."
            sleep 2
          done

      - name: Wait for ClickHouse to be ready
        run: |
          cd docker
          echo "Waiting for ClickHouse..."
          for i in {1..30}; do
            if curl -s http://localhost:8123/ping; then
              echo "ClickHouse is ready!"
              break
            fi
            echo "ClickHouse not ready, retrying..."
            sleep 2
          done

      - name: Wait for Kafka to be ready
        run: |
          cd docker
          echo "Waiting for Kafka..."
          for i in {1..30}; do
            if docker compose exec -T kafka kafka-topics --bootstrap-server localhost:9092 --list 2>/dev/null; then
              echo "Kafka is ready!"
              break
            fi
            echo "Kafka not ready, retrying..."
            sleep 2
          done

      - name: Check service status
        run: |
          cd docker
          docker compose ps
          echo "Checking app logs..."
          docker compose logs app --tail=50

      - name: Test app homepage
        run: |
          cd docker
          echo "Testing app homepage..."
          for i in {1..60}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
            echo "App HTTP Code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "App is responding with 200!"
              break
            fi
            echo "App not ready, retrying..."
            sleep 5
          done

          if [ "$HTTP_CODE" != "200" ]; then
            echo "App failed to return 200"
            exit 1
          fi

      - name: Test websocket server homepage
        run: |
          cd docker
          echo "Testing websocket server homepage..."
          for i in {1..60}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001)
            echo "WebSocket server HTTP Code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "WebSocket server is responding with 200!"
              break
            fi
            echo "WebSocket server not ready, retrying..."
            sleep 5
          done

          if [ "$HTTP_CODE" != "200" ]; then
            echo "WebSocket server failed to return 200"
            exit 1
          fi

      - name: Cleanup on failure
        if: failure()
        run: |
          cd docker
          echo "=== App logs ==="
          docker compose logs app --tail=100
          echo "=== PostgreSQL logs ==="
          docker compose logs postgres --tail=50
          echo "=== Kafka logs ==="
          docker compose logs kafka --tail=50
          echo "=== ClickHouse logs ==="
          docker compose logs clickhouse --tail=50
