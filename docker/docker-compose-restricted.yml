networks:
  internal_net:
    internal: true
    ipam:
      config:
        - subnet: 192.168.240.0/24
  external_net:
    driver: bridge

volumes:
  postgres_data:
  kafka_data:
  minio_data:
  clickhouse_data:
  prisma_binaries:

services:
  app:
    image: quay.io/gentrace/core:production
    entrypoint: ["/entrypoint.sh"]
    command: ["app"]
    ports:
      - "3000:3000"
    networks:
      - internal_net
      - external_net
    dns:
      - 8.8.8.8
      - 1.1.1.1
    user: root
    environment:
      - OTEL_SDK_DISABLED=true
      - DATABASE_URL=${DATABASE_URL}
      - CLICKHOUSE_HOST=${CLICKHOUSE_HOST}
      - CLICKHOUSE_PORT=${CLICKHOUSE_PORT}
      - CLICKHOUSE_PROTOCOL=${CLICKHOUSE_PROTOCOL}
      - CLICKHOUSE_DATABASE=${CLICKHOUSE_DATABASE}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - KAFKA_BROKER=kafka
      - KAFKA_PORT=9092
      - STORAGE_ACCESS_KEY_ID=${STORAGE_ACCESS_KEY_ID}
      - STORAGE_SECRET_ACCESS_KEY=${STORAGE_SECRET_ACCESS_KEY}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - STORAGE_BUCKET=${STORAGE_BUCKET}
      - STORAGE_REGION=${STORAGE_REGION}
      - STORAGE_FORCE_PATH_STYLE=${STORAGE_FORCE_PATH_STYLE}
      - PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      - PORT=${PORT}
      - NEXT_PUBLIC_SELF_HOSTED=${NEXT_PUBLIC_SELF_HOSTED}
      - NEXT_PUBLIC_SELF_HOSTED_TLS=${NEXT_PUBLIC_SELF_HOSTED_TLS}
      - JWT_SECRET=${JWT_SECRET}
      - PRISMA_FIELD_ENCRYPTION_KEY=${PRISMA_FIELD_ENCRYPTION_KEY}
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_started

  migrate:
    image: quay.io/gentrace/core:production
    entrypoint: ["/bin/sh", "-c"]
    command: ["npm run self-hosted:migrate-and-seed"]
    networks:
      - internal_net
      - external_net
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      - OTEL_SDK_DISABLED=true
      - DATABASE_URL=${DATABASE_URL}
      - NODE_TLS_REJECT_UNAUTHORIZED="0"
      - PRISMA_BINARIES_MIRROR=http://prisma-builds.s3-eu-west-1.amazonaws.com
      - PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING="1"
      - CLICKHOUSE_HOST=${CLICKHOUSE_HOST}
      - CLICKHOUSE_PORT=${CLICKHOUSE_PORT}
      - CLICKHOUSE_PROTOCOL=${CLICKHOUSE_PROTOCOL}
      - CLICKHOUSE_DATABASE=${CLICKHOUSE_DATABASE}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - NODE_ENV=${NODE_ENV}
      - ENVIRONMENT=${ENVIRONMENT}
      - JWT_SECRET=${JWT_SECRET}
      - PRISMA_FIELD_ENCRYPTION_KEY=${PRISMA_FIELD_ENCRYPTION_KEY}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_NAME=${ADMIN_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy

  websocket-server:
    image: quay.io/gentrace/core:production
    entrypoint: ["/entrypoint.sh"]
    command: ["websocket"]
    ports:
      - "3001:3001"
    networks:
      - internal_net
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    environment:
      - OTEL_SDK_DISABLED=true
      - DATABASE_URL=${DATABASE_URL}
      - CLICKHOUSE_HOST=${CLICKHOUSE_HOST}
      - CLICKHOUSE_PORT=${CLICKHOUSE_PORT}
      - CLICKHOUSE_PROTOCOL=${CLICKHOUSE_PROTOCOL}
      - CLICKHOUSE_DATABASE=${CLICKHOUSE_DATABASE}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - KAFKA_BROKER=kafka
      - KAFKA_PORT=9092
      - PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      - PORT=3001
      - NEXT_PUBLIC_SELF_HOSTED=${NEXT_PUBLIC_SELF_HOSTED}
      - NEXT_PUBLIC_SELF_HOSTED_TLS=${NEXT_PUBLIC_SELF_HOSTED_TLS}
      - JWT_SECRET=${JWT_SECRET}
      - PRISMA_FIELD_ENCRYPTION_KEY=${PRISMA_FIELD_ENCRYPTION_KEY}
    depends_on:
      migrate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy

  taskrunner:
    image: quay.io/gentrace/core:production
    entrypoint: ["/entrypoint.sh"]
    command: ["taskrunner"]
    networks:
      - internal_net
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    environment:
      - OTEL_SDK_DISABLED=true
      - DATABASE_URL=${DATABASE_URL}
      - CLICKHOUSE_HOST=${CLICKHOUSE_HOST}
      - CLICKHOUSE_PORT=${CLICKHOUSE_PORT}
      - CLICKHOUSE_PROTOCOL=${CLICKHOUSE_PROTOCOL}
      - CLICKHOUSE_DATABASE=${CLICKHOUSE_DATABASE}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - KAFKA_BROKER=kafka
      - KAFKA_PORT=9092
      - PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      - NEXT_PUBLIC_SELF_HOSTED=${NEXT_PUBLIC_SELF_HOSTED}
      - NEXT_PUBLIC_SELF_HOSTED_TLS=${NEXT_PUBLIC_SELF_HOSTED_TLS}
      - JWT_SECRET=${JWT_SECRET}
      - PRISMA_FIELD_ENCRYPTION_KEY=${PRISMA_FIELD_ENCRYPTION_KEY}
      - STORAGE_ACCESS_KEY_ID=${STORAGE_ACCESS_KEY_ID}
      - STORAGE_SECRET_ACCESS_KEY=${STORAGE_SECRET_ACCESS_KEY}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - STORAGE_BUCKET=${STORAGE_BUCKET}
      - STORAGE_REGION=${STORAGE_REGION}
      - STORAGE_FORCE_PATH_STYLE=${STORAGE_FORCE_PATH_STYLE}
    depends_on:
      migrate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy

  taskscheduler:
    image: quay.io/gentrace/core:production
    entrypoint: ["/entrypoint.sh"]
    command: ["taskscheduler"]
    networks:
      - internal_net
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    environment:
      - OTEL_SDK_DISABLED=true
      - DATABASE_URL=${DATABASE_URL}
      - CLICKHOUSE_HOST=${CLICKHOUSE_HOST}
      - CLICKHOUSE_PORT=${CLICKHOUSE_PORT}
      - CLICKHOUSE_PROTOCOL=${CLICKHOUSE_PROTOCOL}
      - CLICKHOUSE_DATABASE=${CLICKHOUSE_DATABASE}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - KAFKA_BROKER=kafka
      - KAFKA_PORT=9092
      - PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      - NEXT_PUBLIC_SELF_HOSTED=${NEXT_PUBLIC_SELF_HOSTED}
      - NEXT_PUBLIC_SELF_HOSTED_TLS=${NEXT_PUBLIC_SELF_HOSTED_TLS}
      - JWT_SECRET=${JWT_SECRET}
      - PRISMA_FIELD_ENCRYPTION_KEY=${PRISMA_FIELD_ENCRYPTION_KEY}
    depends_on:
      migrate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy

  postgres:
    image: postgres:15.3
    environment:
      # Change these values for production use
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gentrace"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - internal_net

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    networks:
      - internal_net
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: "5Yr1SIgYQz-b-dgRabWx4g"
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    networks:
      - internal_net
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_CLUSTERS_0_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS}
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME=${KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME}
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS=${KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS}
    depends_on:
      - kafka

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.4
    networks:
      - internal_net
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${CONNECT_BOOTSTRAP_SERVERS}
      CONNECT_GROUP_ID: ${CONNECT_GROUP_ID}
      CONNECT_CONFIG_STORAGE_TOPIC: ${CONNECT_CONFIG_STORAGE_TOPIC}
      CONNECT_OFFSET_STORAGE_TOPIC: ${CONNECT_OFFSET_STORAGE_TOPIC}
      CONNECT_STATUS_STORAGE_TOPIC: ${CONNECT_STATUS_STORAGE_TOPIC}
      CONNECT_KEY_CONVERTER: ${CONNECT_KEY_CONVERTER}
      CONNECT_VALUE_CONVERTER: ${CONNECT_VALUE_CONVERTER}
      CONNECT_REST_PORT: ${CONNECT_REST_PORT}
      CONNECT_REST_ADVERTISED_HOST_NAME: ${CONNECT_REST_ADVERTISED_HOST_NAME}
    depends_on:
      - kafka

  minio:
    image: minio/minio:latest
    networks:
      - internal_net
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    networks:
      - internal_net
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    ports:
      - "8123:8123"
      - "9100:9000"
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8123/ping",
        ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
