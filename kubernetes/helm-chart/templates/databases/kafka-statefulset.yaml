apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: kafka
    labels:
        app: kafka
spec:
    serviceName: kafka
    replicas: 1
    selector:
        matchLabels:
            app: kafka
    template:
        metadata:
            labels:
                app: kafka
        spec:
            containers:
                - name: kafka
                  image: "{{ .Values.kafka.image }}:{{ .Values.kafka.version }}"
                  securityContext:
                    runAsUser: 0
                    runAsGroup: 0
                  env:
                      - name: KAFKA_NODE_ID
                        value: "1"
                      - name: KAFKA_PROCESS_ROLES
                        value: "broker,controller"
                      - name: KAFKA_LISTENERS
                        value: "PLAINTEXT://:{{ .Values.kafka.port }},PLAINTEXT_HOST://:29092,CONTROLLER://:9093"
                      - name: KAFKA_ADVERTISED_LISTENERS
                        value: "PLAINTEXT://kafka:{{ .Values.kafka.port }},PLAINTEXT_HOST://localhost:29092"
                      - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
                        value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
                      - name: KAFKA_CONTROLLER_LISTENER_NAMES
                        value: "CONTROLLER"
                      - name: KAFKA_CONTROLLER_QUORUM_VOTERS
                        value: "1@localhost:9093"
                      - name: KAFKA_INTER_BROKER_LISTENER_NAME
                        value: "PLAINTEXT"
                      - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
                        value: "1"
                      - name: CLUSTER_ID
                        value: "{{ .Values.kafka.clusterId }}"
                  ports:
                      - name: kafka
                        containerPort: {{ .Values.kafka.port }}
                      - name: kafka-ext
                        containerPort: 29092
                      - name: controller 
                        containerPort: 9093
                  volumeMounts:
                      - name: data
                        mountPath: /var/lib/kafka/data
                        subPath: kafka-data
                  readinessProbe:
                    exec:
                      command:
                      - /bin/sh
                      - -c
                      - kafka-topics --bootstrap-server localhost:29092 --list
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  
                  livenessProbe:
                    exec:
                      command:
                      - /bin/sh
                      - -c
                      - kafka-topics --bootstrap-server localhost:29092 --list
                    initialDelaySeconds: 60
                    periodSeconds: 20
                    timeoutSeconds: 5
                    failureThreshold: 3

                  lifecycle:
                    postStart:
                      exec:
                        command:
                        - /bin/bash
                        - -c
                        - |
                          # Wait for Kafka to be ready by polling
                          until kafka-topics --bootstrap-server localhost:29092 --list > /dev/null 2>&1; do
                            echo "Waiting for Kafka broker to be ready..."
                            sleep 5
                          done
                          
                          kafka-topics --create --if-not-exists \
                            --bootstrap-server localhost:29092 \
                            --topic data

                          # Create topics with retention
                          kafka-topics --create --if-not-exists \
                            --bootstrap-server localhost:29092 \
                            --topic kafka_rpc_request

                          # Retention alters don't work on creation directly, so we need to do an alter
                          kafka-configs --alter \
                            --bootstrap-server localhost:29092 \
                            --entity-type topics \
                            --entity-name kafka_rpc_request \
                            --add-config retention.ms=300000

                          kafka-topics --create --if-not-exists \
                            --bootstrap-server localhost:29092 \
                            --topic kafka_rpc_response

                          # Retention alters don't work on creation directly, so we need to do an alter
                          kafka-configs --alter \
                            --bootstrap-server localhost:29092 \
                            --entity-type topics \
                            --entity-name kafka_rpc_response \
                            --add-config retention.ms=300000
            volumes:
                - name: jaas-config
                  secret:
                    secretName: {{ .Values.secrets.kafka.name }}
                    items:
                      - key: kafka_server_jaas.conf
                        path: kafka_server_jaas.conf
                {{- if .Values.kafka.storage.useExistingPVC }}
                - name: data
                  persistentVolumeClaim:
                    claimName: {{ .Values.kafka.storage.existingPVCName }}
                {{- end }}
    {{- if not .Values.kafka.storage.useExistingPVC }}
    volumeClaimTemplates:
        - metadata:
              name: data
          spec:
              accessModes: ["ReadWriteOnce"]
              {{- if .Values.kafka.storage.storageClass }}
              storageClassName: {{ .Values.kafka.storage.storageClass }}
              {{- end }}
              resources:
                  requests:
                      storage: {{ .Values.kafka.storage.size }}
    {{- end }}
