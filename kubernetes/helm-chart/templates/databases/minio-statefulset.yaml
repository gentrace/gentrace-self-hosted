{{- if and .Values.objectStorage.enabled .Values.objectStorage.useMinio }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: minio
    labels:
        app: minio
spec:
    serviceName: minio
    replicas: 1
    selector:
        matchLabels:
            app: minio
    template:
        metadata:
            labels:
                app: minio
            {{- if .Values.istio.enabled }}
            annotations:
                sidecar.istio.io/inject: {{ .Values.istio.injection | quote }}
                {{- with .Values.istio.annotations }}
                {{- toYaml . | nindent 16 }}
                {{- end }}
            {{- end }}
        spec:
            containers:
                - name: minio
                  image: "{{ .Values.objectStorage.minio.image }}:{{ .Values.objectStorage.minio.version }}"
                  ports:
                    - name: api
                      containerPort: {{ .Values.objectStorage.minio.ports.api }}
                    - name: console
                      containerPort: {{ .Values.objectStorage.minio.ports.console }}
                  env:
                    - name: MINIO_ROOT_USER
                      valueFrom:
                        secretKeyRef:
                          name: {{ .Values.secrets.objectStorage.name }}
                          key: STORAGE_ACCESS_KEY_ID
                    - name: MINIO_ROOT_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: {{ .Values.secrets.objectStorage.name }}
                          key: STORAGE_SECRET_ACCESS_KEY
                    - name: STORAGE_BUCKET
                      valueFrom:
                        secretKeyRef:
                          name: {{ .Values.secrets.objectStorage.name }}
                          key: STORAGE_BUCKET
                    - name: MINIO_DEFAULT_BUCKETS
                      valueFrom:
                        secretKeyRef:
                          name: {{ .Values.secrets.objectStorage.name }}
                          key: STORAGE_BUCKET
                  volumeMounts:
                    - name: data
                      mountPath: /bitnami/minio/data
                  livenessProbe:
                    httpGet:
                        path: /minio/health/live
                        port: api
                    initialDelaySeconds: 30
                    periodSeconds: 30
                    timeoutSeconds: 20
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                        path: /minio/health/live
                        port: api
                    initialDelaySeconds: 30
                    periodSeconds: 30
                    timeoutSeconds: 20
                    failureThreshold: 3
                  resources:
                    {{- toYaml .Values.objectStorage.minio.resources | nindent 20 }}
            securityContext:
              fsGroup: 1001
            {{- if .Values.objectStorage.minio.storage.useExistingPVC }}
            volumes:
                - name: data
                  persistentVolumeClaim:
                    claimName: {{ .Values.objectStorage.minio.storage.existingPVCName }}
            {{- end }}
    {{- if not .Values.objectStorage.minio.storage.useExistingPVC }}
    volumeClaimTemplates:
        - metadata:
              name: data
          spec:
              accessModes: ["ReadWriteOnce"]
              {{- if .Values.objectStorage.minio.storage.storageClass }}
              storageClassName: {{ .Values.objectStorage.minio.storage.storageClass }}
              {{- end }}
              resources:
                  requests:
                      storage: {{ .Values.objectStorage.minio.storage.size }}
    {{- end }}
{{- end }} 